# -*- coding: utf-8 -*-
"""HANDSON9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H8ciTIvl9OTN2tI6oqTsG_4pxql6x0z0
"""

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("DataFrameExample"). getOrCreate()
data = [

    ('James', 34, 'M', 3000, 1),
    ('Anna', 28, 'F', 4100, 2),
    ('Lee', 23, 'M', 2700, 1),
    ('Kim', 25, 'F', 3200, 2),
    ('Jenner', 29, 'F', 4000,1),
    ('Sofia', 24, 'F', 2500, 1),
    ['Louis', 24, 'M', 2700, 1],
    ['Joan', 23, 'M', 2800, 2],
    ['Khloe', 23, 'F', 2900, 1],
    ['Olivia', 24, 'F', 2400, 1],
    ['Anabelle', 28, 'F', 3400, 2],
    ['Lucky', 24, 'M', 2700, 1],
    ['Britney', 34, 'F', 3300, 1],

]
columns = ['Name', 'Age', 'Gender', 'Salary', 'DeptId']
df = spark.createDataFrame(data, schema=columns)
df.createOrReplaceTempView('employees')
spark.sql('SELECT * FROM employees').show()
spark.sql('SELECT Name, Age FROM employees WHERE Salary > 3000').show()
spark.sql('SELECT AVG(Salary) FROM employees').show()

spark.sql('''
SELECT Gender, SUM(Salary) as TotalSalary, Age
FROM employees
GROUP BY Gender, Age
ORDER BY Age
''').show()
#1 avg per dept
spark.sql('''
SELECT DeptId, AVG(Salary) as AVGSalary
FROM Employees
GROUP BY DeptId
''').show()
#2s
spark.sql('''
SELECT Gender, Name, Salary
FROM Employees
WHERE Salary > (
  SELECT AVG(Salary)
  FROM Employees e
  WHERE e.Gender = Employees.Gender
)
''').show()
#3
spark.sql('''
SELECT Name, DeptId, Salary,
  RANK() OVER (PARTITION BY DeptId ORDER BY SALARY DESC) AS Rank
FROM Employees
''').show()

spark.sql('''
SELECT Name, Age, Salary, ROW_NUMBER() OVER (PARTITION BY Age ORDER BY Salary DESC) as rank
FROM employees
''').show()

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('Pertemuan9').getOrCreate()

# Data setup for complex SQL queries
employees = spark.createDataFrame([
     ('James', 34, 'M', 3000, 1),
    ('Anna', 28, 'F', 4100, 2),
    ('Lee', 23, 'M', 2700, 1),
    ('Kim', 25, 'F', 3200, 2),
    ('Jenner', 29, 'F', 4000,1),
    ('Sofia', 24, 'F', 2500, 1),
], ['Name', 'Age', 'Gender', 'Salary', 'DeptId'])
departments = spark.createDataFrame([
    (1, 'HR'),
    (2, 'Marketing')
], ['DeptId', 'DeptName'])
projects = spark.createDataFrame([
    (1, 'Project A'),
    (2, 'Project B')
], ['DeptId', 'ProjectName'])
employees.createOrReplaceTempView('employees')
departments.createOrReplaceTempView('departments')
projects.createOrReplaceTempView('projects')

# Complex SQL query involving multiple joins and subqueries
spark.sql('''
SELECT e.Name, e.Age, d.DeptName, p.ProjectName
FROM employees e
JOIN departments d ON e.DeptId = d.DeptId
JOIN projects p ON e.DeptId = p.DeptId
''').show()

#QUERY MENEMUKAN AVG GAJI PER DEPT DAN RANK EMPLOYEE DALAM DEPT BERDASARAKAN SALARY
spark.sql('''
SELECT e.Name, e.DeptId, d.DeptName, e.Salary,
AVG (e.Salary) OVER (PARTITION BY e.DeptId) AS AvgSalary,
RANK() OVER (PARTITION BY e.DeptId ORDER BY e.Salary DESC) AS SalaryRank
FROM employees e
JOIN departments d
ON e.DeptId = d.DeptId
''').show()
#GUNAKAN WINDOW FUNCT
spark.sql('''
SELECT
    e.DeptId,
    d.DeptName,
    e.Age,
    AVG(e.Age) OVER (PARTITION BY e.DeptId) AS AvgAge,
    MIN(e.Age) OVER (PARTITION BY e.DeptId) AS MinAge,
    MAX(e.Age) OVER (PARTITION BY e.DeptId) AS MaxAge
FROM
    employees e
JOIN
    departments d
ON
    e.DeptId = d.DeptId
''').show()

import matplotlib.pyplot as plt
import pandas as pd
from pyspark.sql import SparkSession

# Create a SparkSession
spark = SparkSession.builder.appName("VisualizationExample").getOrCreate()

# Advanced data analysis with visualization
salary_trends = spark.sql('''
SELECT Age, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Age
ORDER BY Age
''').toPandas()

# Visualization of salary trends
plt.figure(figsize=(10, 5))
plt.plot(salary_trends['Age'], salary_trends['AverageSalary'], marker='o')
plt.xlabel('Age')
plt.ylabel('Average Salary')
plt.title('Trend gajji berdasarkan usia')
plt.grid(True)
plt.show()

#HOMEWORK

#TUGAS 1
employees= spark.sql('''
SELECT
    d.DeptName,
    SUM(e.Salary) AS TotalSalary,
    COUNT(e.Name) AS TotalEmployees
FROM
    employees e
JOIN
    departments d
ON
    e.DeptId = d.DeptId
GROUP BY
    d.DeptName
''').toPandas()

employees.plot(x='DeptName', y=['TotalSalary', 'TotalEmployees'], kind='bar', figsize=(10, 6))
plt.title('PERBANDINGAN TOTAL GAJI DAN EMPLOYEES ANTAR DEPT')
plt.xlabel('Department')
plt.ylabel('Salary')
plt.grid(True)
plt.show()


# TUGAS 2
Avg_SalaryEmp= spark.sql('''
WITH AvgSalary AS (
    SELECT AVG(Salary) AS Avg_Salary FROM employees
)
SELECT
    CASE
        WHEN Age BETWEEN 20 AND 29 THEN '20-29'
        WHEN Age BETWEEN 30 AND 39 THEN '30-39'
        ELSE '40+'
    END AS AgeGroup,
    SUM(Salary) AS Total_Salary
FROM employees, AvgSalary
WHERE Salary > AvgSalary.Avg_Salary
GROUP BY AgeGroup
''').toPandas()

# Asumsikan Avg_SalaryEmp sudah menjadi DataFrame pandas
Avg_SalaryEmp.groupby('AgeGroup')['Total_Salary'].sum().plot(kind='bar', figsize=(8, 6))
plt.title('Jumlah Gaji Karyawan di Atas Rata-rata per Kelompok Usia')
plt.xlabel('Kelompok Usia')
plt.ylabel('Total Gaji')
plt.grid(True)
plt.show()