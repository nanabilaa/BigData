from pymongo import MongoClient, InsertOne, UpdateOne, DeleteOne

# Establish client connection
client = MongoClient('mongodb://localhost:27017/')
db = client['university_db']
courses_collection = db['courses']

# Bulk insert of courses with student enrollments, using upsert to avoid duplicates
operations = [
    InsertOne({'course': 'Math 101', 'enrollments': 30, 'department': 'Mathematics'}),
    InsertOne({'course': 'CS 102', 'enrollments': 25, 'department': 'Computer Science'}),
    InsertOne({'course': 'History 201', 'enrollments': 20, 'department': 'History'}),
    InsertOne({'course': 'Physics 202', 'enrollments': 15, 'department': 'Physics'}),
    InsertOne({'course': 'Electricity and magnetism 203', 'enrollments': 37, 'department': 'Physics'}),
    InsertOne({'course': 'AI 303', 'enrollments': 28, 'department': 'Computer Science'}),
    InsertOne({'course': 'Machine Leaning 301', 'enrollments': 30, 'department': 'Computer Science'}),
    InsertOne({'course': 'Algebra 304', 'enrollments': 35, 'department': 'Mathematics'}),
    InsertOne({'course': 'Calculus 205', 'enrollments': 40, 'department': 'Mathematics'}),
    InsertOne({'course': 'Roman history: the rise and fall of the Republic 333', 'enrollments': 32, 'department': 'History'}),
    InsertOne({'course': 'History of the British Isles 240', 'enrollments': 31, 'department': 'History'}),
]

courses_collection.bulk_write(operations)
print('Courses inserted successfully.')



print("---------------------------------- complex filtering and querying ----------------------------------")

### 2. Complex Filtering and Querying
for course in courses_collection.find({'enrollments': {'$gt': 20}}):
    print(course)

print("---------------------------------- end of filtering ----------------------------------")

# Query courses in Computer Science or Mathematics departments
for course in courses_collection.find({'department': {'$in': ['Computer Science', 'Mathematics']}}):
    print(course)

print("---------------------------------- avg enrollment per dept using aggregation ----------------------------------")
### 3. Aggregation Framework for Data Analysis
# Average enrollment per department using aggregation
pipeline = [
    {'$group': {'_id': '$department', 'average_enrollment': {'$avg': '$enrollments'}}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)

print("---------------------------------- max enrollment per dept ----------------------------------")
 # Maximum enrollment per department
pipeline = [
    {'$group': {'_id': '$department', 'max_enrollment': {'$max': '$enrollments'}}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)

 ### 4. Data Transformation using $project and $addFields
# - **Exercise 4**: Use `$project` to rename and only show fields: `course_name`, `department_name`, and `enrollments`.
# - **Task 4**: Use `$addFields` to create a new field `enrollment_category` where enrollments > 20 are 'high' and others 'low'.
# Projection to rename fields
print("---------------------------------- renaming fields ----------------------------------")
pipeline = [
    {'$project': {'course_name': '$course', 'department_name': '$department', 'enrollments': 1}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)

print("---------------------------------- addding enrollment category field based on enrollments ----------------------------------")
# Adding enrollment category field based on enrollments
pipeline = [
    {'$addFields': {'enrollment_category': {'$cond': {'if': {'$gt': ['$enrollments', 20]}, 'then': 'high', 'else': 'low'}}}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)

#HOMEWORK
print("1. ---------------------------------- Using aggregation to count courses per dept ----------------------------------")
# 1. Perform an aggregation to get a count of courses per department.
pipeline = [
    {'$group': {'_id': '$department', 'course_count': {'$sum': 1}}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)

print("2. ---------------------------------- Using '$match' and '$group' to filtering in 'computer science' ----------------------------------")
#2.  Use `$match` and `$group` together to filter and get only courses with enrollments over 25 in 'Computer Science'.
pipeline = [
    {'$match': {'enrollments': {'$gt': 25}, 'department': 'Computer Science'}},
    {'$group': {'_id': '$department', 'courses': {'$push': '$course'}}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)
print("2. ---------------------------------- Using '$match' and '$group' to filtering in every department ----------------------------------")
pipeline = [
    {'$match' : {'enrollments' : {'$gt' : 20}}},
    {'$group': {'_id' : '$department', 'courses' : {'$push' : '$course'}}}
]
for result in courses_collection.aggregate(pipeline):
    print(result)


from pymongo import MongoClient, InsertOne, UpdateOne, DeleteOne

client = MongoClient('mongodb://localhost:27017/')
db = client['university_db']
courses_collection = db['courses']
students_collection = db['students']

#Menghinfari dublikasi
courses_collection.delete_many({})
students_collection.delete_many({})

# bulkwrite
course_operations = [
    InsertOne({'course': 'Math 101', 'enrollments': 30, 'department': 'Mathematics'}),
    InsertOne({'course': 'CS 102', 'enrollments': 25, 'department': 'Computer Science'}),
    InsertOne({'course': 'History 201', 'enrollments': 20, 'department': 'History'}),
    InsertOne({'course': 'Physics 202', 'enrollments': 15, 'department': 'Physics'}),
    InsertOne({'course': 'Electricity and magnetism 203', 'enrollments': 37, 'department': 'Physics'}),
    InsertOne({'course': 'AI 303', 'enrollments': 28, 'department': 'Computer Science'}),
    InsertOne({'course': 'Machine Learning 301', 'enrollments': 30, 'department': 'Computer Science'}),
    InsertOne({'course': 'Algebra 304', 'enrollments': 35, 'department': 'Mathematics'}),
    InsertOne({'course': 'Calculus 205', 'enrollments': 40, 'department': 'Mathematics'}),
    InsertOne({'course': 'Roman history: the rise and fall of the Republic 333', 'enrollments': 32, 'department': 'History'}),
    InsertOne({'course': 'History of the British Isles 240', 'enrollments': 31, 'department': 'History'}),
]

courses_collection.bulk_write(course_operations)
print('Courses inserted successfully.')

# bulk students
student_operations = [
    InsertOne({'student_id': 1, 'name': 'Abdul', 'enrolled_course': 'Math 101'}),
    InsertOne({'student_id': 2, 'name': 'Bernard', 'enrolled_course': 'CS 102'}),
    InsertOne({'student_id': 3, 'name': 'Dimas', 'enrolled_course': 'History 201'}),
    InsertOne({'student_id': 4, 'name': 'Donald', 'enrolled_course': 'Physics 202'}),
    InsertOne({'student_id': 5, 'name': 'Ether', 'enrolled_course': 'AI 303'}),
    InsertOne({'student_id': 6, 'name': 'Hanna', 'enrolled_course': 'Machine Learning 301'}),
    InsertOne({'student_id': 7, 'name': 'Bob', 'enrolled_course': 'Algebra 304'}),
    InsertOne({'student_id': 8, 'name': 'Ivanka', 'enrolled_course': 'Calculus 205'}),
    InsertOne({'student_id': 9, 'name': 'Camilla', 'enrolled_course': 'Roman history: the rise and fall of the Republic 333'}),
    InsertOne({'student_id': 10, 'name': 'Olivia', 'enrolled_course': 'History of the British Isles 240'}),
]

students_collection.bulk_write(student_operations)
print('Students inserted successfully.')

# $lookup
print("---------------------------------- Using '$lookup' to join courses with students ----------------------------------")
pipeline = [
    {'$lookup': {
        'from': 'students',
        'localField': 'course',
        'foreignField': 'enrolled_course',
        'as': 'student_info'
    }}
]
for result in courses_collection.aggregate(pipeline):
    print(result)

 

